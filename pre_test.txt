trim trailing whitespace.................................................[42mPassed[m
fix end of files.........................................................[42mPassed[m
check docstring is first.................................................[42mPassed[m
check json...............................................................[42mPassed[m
check yaml...............................................................[42mPassed[m
check toml...............................................................[42mPassed[m
debug statements (python)................................................[42mPassed[m
python tests naming......................................................[42mPassed[m
black....................................................................[41mFailed[m
[2m- hook id: black[m
[2m- files were modified by this hook[m

[1mreformatted colrev/ops/built_in/search_sources/semanticscholarui.py[0m

[1mAll done! ✨ 🍰 ✨[0m
[34m[1m1 file [0m[1mreformatted[0m, [34m278 files [0mleft unchanged.

flake8...................................................................[41mFailed[m
[2m- hook id: flake8[m
[2m- exit code: 1[m

[1mcolrev/ops/built_in/search_sources/semanticscholar_api.py[m[36m:[m77[36m:[m111[36m:[m [1m[31mE501[m line too long (133 > 110 characters)
[1mcolrev/ops/built_in/search_sources/semanticscholar_api.py[m[36m:[m105[36m:[m9[36m:[m [1m[31mF841[m local variable '__search_return__' is assigned to but never used

Reorder python imports...................................................[42mPassed[m
pyupgrade................................................................[42mPassed[m
mypy.....................................................................[41mFailed[m
[2m- hook id: mypy[m
[2m- exit code: 1[m

colrev/ops/built_in/search_sources/semanticscholarui.py:12: [1m[31merror:(B[m Need type annotation for (B[m[1m"search_params"(B[m (hint: (B[m[1m"search_params: Dict[<type>, <type>] = ..."(B[m)  (B[m[33m[var-annotated](B[m
colrev/ops/built_in/search_sources/semanticscholarui.py:241: [1m[31merror:(B[m Incompatible default for argument (B[m[1m"existing_key"(B[m (default has type (B[m[1m"None"(B[m, argument has type (B[m[1m"str"(B[m)  (B[m[33m[assignment](B[m
colrev/ops/built_in/search_sources/semanticscholarui.py:241: [34mnote:(B[m PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True(B[m
colrev/ops/built_in/search_sources/semanticscholarui.py:241: [34mnote:(B[m Use [4mhttps://github.com/hauntsaninja/no_implicit_optional(B[m to automatically upgrade your codebase(B[m
colrev/ops/built_in/search_sources/semanticscholarui.py:463: [1m[31merror:(B[m Module (B[m[1m"re"(B[m is not valid as a type  (B[m[33m[valid-type](B[m
colrev/ops/built_in/search_sources/semanticscholarui.py:463: [34mnote:(B[m Perhaps you meant to use a protocol matching the module structure?(B[m
colrev/ops/built_in/search_sources/semanticscholar_utils.py:14: [1m[31merror:(B[m Item (B[m[1m"None"(B[m of (B[m[1m"Optional[Any]"(B[m has no attribute (B[m[1m"__iter__"(B[m (not iterable)  (B[m[33m[union-attr](B[m
colrev/ops/built_in/search_sources/semanticscholar_utils.py:24: [1m[31merror:(B[m Incompatible return value type (got (B[m[1m"str"(B[m, expected (B[m[1m"ENTRYTYPES"(B[m)  (B[m[33m[return-value](B[m
colrev/ops/built_in/search_sources/semanticscholar_utils.py:26: [1m[31merror:(B[m Incompatible return value type (got (B[m[1m"str"(B[m, expected (B[m[1m"ENTRYTYPES"(B[m)  (B[m[33m[return-value](B[m
colrev/ops/built_in/search_sources/semanticscholar_utils.py:28: [1m[31merror:(B[m Incompatible return value type (got (B[m[1m"str"(B[m, expected (B[m[1m"ENTRYTYPES"(B[m)  (B[m[33m[return-value](B[m
colrev/ops/built_in/search_sources/semanticscholar_utils.py:30: [1m[31merror:(B[m Incompatible return value type (got (B[m[1m"str"(B[m, expected (B[m[1m"ENTRYTYPES"(B[m)  (B[m[33m[return-value](B[m
colrev/ops/built_in/search_sources/semanticscholar_utils.py:32: [1m[31merror:(B[m Incompatible return value type (got (B[m[1m"str"(B[m, expected (B[m[1m"ENTRYTYPES"(B[m)  (B[m[33m[return-value](B[m
colrev/ops/built_in/search_sources/semanticscholar_utils.py:34: [1m[31merror:(B[m Incompatible return value type (got (B[m[1m"str"(B[m, expected (B[m[1m"ENTRYTYPES"(B[m)  (B[m[33m[return-value](B[m
colrev/ops/built_in/search_sources/semanticscholar_utils.py:37: [1m[31merror:(B[m Function is missing a type annotation for one or more arguments  (B[m[33m[no-untyped-def](B[m
colrev/ops/built_in/search_sources/semanticscholar_utils.py:63: [1m[31merror:(B[m Item (B[m[1m"None"(B[m of (B[m[1m"Optional[Any]"(B[m has no attribute (B[m[1m"items"(B[m  (B[m[33m[union-attr](B[m
colrev/ops/built_in/search_sources/semanticscholar_utils.py:85: [1m[31merror:(B[m Argument (B[m[1m"entrytype"(B[m to (B[m[1m"__convert_entry_types"(B[m has incompatible type (B[m[1m"Optional[Any]"(B[m; expected (B[m[1m"str"(B[m  (B[m[33m[arg-type](B[m
colrev/ops/built_in/search_sources/semanticscholar_utils.py:99: [1m[31merror:(B[m Unsupported right operand type for in ((B[m[1m"Optional[Any]"(B[m)  (B[m[33m[operator](B[m
colrev/ops/built_in/search_sources/semanticscholar_utils.py:100: [1m[31merror:(B[m Value of type (B[m[1m"Optional[Any]"(B[m is not indexable  (B[m[33m[index](B[m
colrev/ops/built_in/search_sources/semanticscholar_utils.py:104: [1m[31merror:(B[m Unsupported right operand type for in ((B[m[1m"Optional[Any]"(B[m)  (B[m[33m[operator](B[m
colrev/ops/built_in/search_sources/semanticscholar_utils.py:105: [1m[31merror:(B[m Value of type (B[m[1m"Optional[Any]"(B[m is not indexable  (B[m[33m[index](B[m
colrev/ops/built_in/search_sources/semanticscholar_api.py:212: [1m[31merror:(B[m Unsupported operand types for + ((B[m[1m"str"(B[m and (B[m[1m"None"(B[m)  (B[m[33m[operator](B[m
colrev/ops/built_in/search_sources/semanticscholar_api.py:212: [34mnote:(B[m Right operand is of type (B[m[1m"Optional[Any]"(B[m(B[m
colrev/ops/built_in/search_sources/semanticscholar_api.py:237: [1m[31merror:(B[m Unsupported operand types for + ((B[m[1m"str"(B[m and (B[m[1m"None"(B[m)  (B[m[33m[operator](B[m
colrev/ops/built_in/search_sources/semanticscholar_api.py:237: [34mnote:(B[m Right operand is of type (B[m[1m"Optional[Any]"(B[m(B[m
colrev/ops/built_in/search_sources/semanticscholar_api.py:256: [1m[31merror:(B[m Argument 2 to (B[m[1m"update_registry"(B[m of (B[m[1m"EnvironmentManager"(B[m has incompatible type (B[m[1m"Optional[str]"(B[m; expected (B[m[1m"str"(B[m  (B[m[33m[arg-type](B[m
colrev/ops/built_in/search_sources/semanticscholar_api.py:259: [1m[31merror:(B[m Incompatible return value type (got (B[m[1m"Optional[str]"(B[m, expected (B[m[1m"str"(B[m)  (B[m[33m[return-value](B[m
colrev/ops/built_in/search_sources/semanticscholar_api.py:387: [1m[31merror:(B[m Missing return statement  (B[m[33m[return](B[m
colrev/ops/built_in/search_sources/semanticscholar_api.py:399: [1m[31merror:(B[m Missing return statement  (B[m[33m[return](B[m
colrev/ops/built_in/search_sources/semanticscholar_api.py:404: [1m[31merror:(B[m Missing return statement  (B[m[33m[return](B[m
colrev/ops/built_in/search_sources/semanticscholar_api.py:409: [1m[31merror:(B[m Missing return statement  (B[m[33m[return](B[m
[1m[31mFound 25 errors in 3 files (checked 279 source files)(B[m

ruff.....................................................................[41mFailed[m
[2m- hook id: ruff[m
[2m- exit code: 1[m

[1mcolrev/ops/built_in/search_sources/semanticscholar_api.py[0m[36m:[0m105[36m:[0m9[36m:[0m [1;31mF841[0m Local variable `__search_return__` is assigned to but never used
Found 1 error.
No fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).

pytest-check.............................................................[41mFailed[m
[2m- hook id: pytest-check[m
[2m- exit code: 1[m

[1m============================= test session starts ==============================[0m
platform linux -- Python 3.10.12, pytest-7.4.2, pluggy-1.3.0
rootdir: /home/peteer98/Desktop/SemanticScholar/colrev
plugins: mock-3.12.0, dash-2.14.0, anyio-4.1.0, requests-mock-1.11.0
[1mcollecting ... [0m[1mcollecting 204 items                                                           [0m[1mcollected 235 items                                                            [0m

tests/0_core/colrev_pdf_id_test.py [31mE[0m[31mE[0m[31m                                    [  0%][0m
tests/0_core/linter_test.py [31mE[0m[31m                                            [  1%][0m
tests/0_core/qm_test.py [31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31m [ 21%]
[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31m                                                                  [ 24%][0m
tests/0_core/record_state_state_model_test.py [31mE[0m[31mE[0m[31mE[0m[31mE[0m[31m                       [ 26%][0m
tests/0_core/record_test.py [31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31m [ 45%]
[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31m                                                                     [ 46%][0m
tests/0_core/search_feed_test.py [31mE[0m[31m                                       [ 47%][0m
tests/0_core/settings_test.py [31mE[0m[31m                                          [ 47%][0m
tests/0_core/upgrade_test.py [31mE[0m[31m                                           [ 48%][0m
tests/1_env/custom_script_setup_test.py [31mE[0m[31m                                [ 48%][0m
tests/1_env/environment_manager_test.py [31mE[0m[31mE[0m[31mE[0m[31mE[0m[31m                             [ 50%][0m
tests/1_env/language_service_test.py [31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31m             [ 60%][0m
tests/1_env/local_index_test.py [31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31m                                   [ 62%][0m
tests/1_env/packages_test.py [31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31m                              [ 68%][0m
tests/1_env/tei_test.py [31mE[0m[31m                                                [ 68%][0m
tests/2_ops/check_operation_test.py [31mE[0m[31m                                    [ 69%][0m
tests/2_ops/check_test.py [31mE[0m[31m                                              [ 69%][0m
tests/2_ops/correction_test.py [31mE[0m[31m                                         [ 70%][0m
tests/2_ops/data_operation_test.py [31mE[0m[31mE[0m[31m                                    [ 71%][0m
tests/2_ops/dedupe_operation_test.py [31mE[0m[31mE[0m[31mE[0m[31m                                 [ 72%][0m
tests/2_ops/init_test.py [31mE[0m[31mE[0m[31mE[0m[31m                                             [ 73%][0m
tests/2_ops/load_utils_bib_test.py [31mE[0m[31m                                     [ 74%][0m
tests/2_ops/load_utils_enl_test.py [31mE[0m[31m                                     [ 74%][0m
tests/2_ops/pdf_get_operation_test.py [31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31m                              [ 76%][0m
tests/2_ops/pdf_prep_man_operation_test.py [31mE[0m[31m                             [ 77%][0m
tests/2_ops/pdf_prep_operation_test.py [31mE[0m[31mE[0m[31m                                [ 77%][0m
tests/2_ops/prep_man_operation_test.py [31mE[0m[31mE[0m[31mE[0m[31m                               [ 79%][0m
tests/2_ops/prep_operation_test.py [31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31m                                [ 81%][0m
tests/2_ops/prescreen_operation_test.py [31mE[0m[31m                                [ 82%][0m
tests/2_ops/screen_operation_test.py [31mE[0m[31m                                   [ 82%][0m
tests/2_ops/search_operation_test.py [31mE[0m[31mE[0m[31mE[0m[31mE[0m[31m                                [ 84%][0m
tests/2_ops/trace_operation_test.py [31mE[0m[31m                                    [ 84%][0m
tests/3_built_in/add_journal_rankings_prep_test.py [31mE[0m[31m                     [ 85%][0m
tests/3_built_in/bibtex_crossref_resolution_test.py [31mE[0m[31m                    [ 85%][0m
tests/3_built_in/crossref_test.py [31mE[0m[31mE[0m[31mE[0m[31m                                    [ 86%][0m
tests/3_built_in/eric_test.py [31mE[0m[31m                                          [ 87%][0m
tests/3_built_in/exclude_complementary_materials_prep_test.py [31mE[0m[31mE[0m[31mE[0m[31m        [ 88%][0m
tests/3_built_in/exclude_languages_prep_test.py [31mE[0m[31mE[0m[31mE[0m[31mE[0m[31m                     [ 90%][0m
tests/3_built_in/source_specific_load_prep_test.py [31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31mE[0m[31m  [ 98%][0m
tests/3_built_in/unpaywall_test.py [31mE[0m[31m                                     [ 99%][0m
tests/3_built_in/year_vol_iss_prep_test.py [31mE[0m[31mE[0m[31m                            [100%][0m

==================================== ERRORS ====================================
[31m[1m_ ERROR at setup of test_pdf_hash[pdf_path0-87ffff1fffffff1ff47fff7fe0000307e000071fffffff07f1603f0ffd67fffff7ffffffe0000007e0000007e0000007fc6d59b7e3ffffffe03fffffffffffffe1ff0007e0000007e0000007e00080ffe0008007e0000007e0000007e0000007e0008007e000fdffe0008fffe000000ff00087ffffffffffffffffffffffffff] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
---------------------------- Captured stdout setup -----------------------------
Reinitialize record_index and toc_index
Removing deprecated field: pdf_hash
Language not in ISO 639-3 format: Non-Standard language format
Record cannot be indexed: -
{'ID': 'ZviranErlich2003', 'ENTRYTYPE': 'article', 'colrev_origin': ['lr_db.bib/Zviran2003'], 'colrev_status': <RecordState.rev_synthesized: 15>, 'colrev_masterdata_provenance': {'journal': {'source': 'lr_db.bib/Zviran2003', 'note': ''}, 'title': {'source': 'lr_db.bib/Zviran2003', 'note': ''}, 'year': {'source': 'lr_db.bib/Zviran2003', 'note': ''}, 'volume': {'source': 'lr_db.bib/Zviran2003', 'note': ''}, 'pages': {'source': 'lr_db.bib/Zviran2003', 'note': ''}, 'author': {'source': 'lr_db.bib/Zviran2003', 'note': ''}}, 'colrev_data_provenance': {'file': {'source': 'lr_db.bib/Zviran2003', 'note': ''}, 'colrev_pdf_id': {'source': 'file|pdf_hash', 'note': ''}, 'doi': {'source': 'manual', 'note': ''}, 'literature_review': {'source': 'CURATED:gh...', 'note': ''}}, 'colrev_pdf_id': 'cpid2:fffffffff80813fffffffffff07ffffff00fbffff000001ff032e11fffffffffff0000ffffc003fff8fffffff01ffffff8fffffff8affffff80ffffffffffffffffffffff8a24a5ff800000ff000001ff8fffffff80801fff87ffffff800001ff800001ff804f47ff800001ff000001ffbdffffffffffffffbbeffffffffffff', 'file': PosixPath('curation_layer.bib/data/pdfs/ZviranErlich2003.pdf'), 'doi': '10.17705/1CAIS.01205', 'journal': 'Communications of the Association for Information Systems', 'title': 'Measuring IS User Satisfaction: Review and Implications', 'year': 'last year...', 'volume': '12', 'pages': '81--103', 'literature_review': 'yes', 'author': 'Zviran, Moshe and Erlich, Zippy', 'metadata_source_repository_paths': 'curation_layer.bib', 'bibtex': '@article{ZviranErlich2003,\n   colrev_origin                 = {lr_db.bib/Zviran2003;},\n   colrev_status                 = {rev_synthesized},\n   colrev_masterdata_provenance  = {journal:lr_db.bib/Zviran2003;;\n                                    title:lr_db.bib/Zviran2003;;\n                                    year:lr_db.bib/Zviran2003;;\n                                    volume:lr_db.bib/Zviran2003;;\n                                    pages:lr_db.bib/Zviran2003;;\n                                    author:lr_db.bib/Zviran2003;;},\n   colrev_data_provenance        = {file:lr_db.bib/Zviran2003;;\n                                    colrev_pdf_id:file|pdf_hash;;\n                                    doi:manual;;\n                                    literature_review:CURATED:gh...;;},\n   colrev_pdf_id                 = {cpid2:fffffffff80813fffffffffff07ffffff00fbffff000001ff032e11fffffffffff0000ffffc003fff8fffffff01ffffff8fffffff8affffff80ffffffffffffffffffffff8a24a5ff800000ff000001ff8fffffff80801fff87ffffff800001ff800001ff804f47ff800001ff000001ffbdffffffffffffffbbeffffffffffff},\n   screening_criteria            = {NA},\n   file                          = {curation_layer.bib/data/pdfs/ZviranErlich2003.pdf},\n   doi                           = {10.17705/1CAIS.01205},\n   author                        = {Zviran, Moshe and Erlich, Zippy},\n   journal                       = {Communications of the Association for Information Systems},\n   title                         = {Measuring IS User Satisfaction: Review and Implications},\n   year                          = {last year...},\n   volume                        = {12},\n   pages                         = {81--103},\n   literature_review             = {yes},\n   metadata_source_repository_paths  = {curation_layer.bib},\n}\n'}
Record cannot be indexed: -
{'ID': 'Zwass2003', 'ENTRYTYPE': 'article', 'colrev_origin': ['lr_db.bib/Zwass2003'], 'colrev_status': <RecordState.rev_prescreen_excluded: 6>, 'colrev_masterdata_provenance': {'journal': {'source': 'lr_db.bib/Zwass2003', 'note': ''}, 'year': {'source': 'lr_db.bib/Zwass2003', 'note': ''}, 'volume': {'source': 'lr_db.bib/Zwass2003', 'note': ''}, 'pages': {'source': 'lr_db.bib/Zwass2003', 'note': ''}, 'author': {'source': 'lr_db.bib/Zwass2003', 'note': ''}, 'title': {'source': 'manual', 'note': ''}, 'number': {'source': 'manual', 'note': ''}}, 'colrev_data_provenance': {'file': {'source': 'lr_db.bib/Zwass2003', 'note': ''}, 'colrev_pdf_id': {'source': 'file|pdf_hash', 'note': ''}, 'doi': {'source': 'manual', 'note': ''}, 'dblp_key': {'source': 'manual', 'note': ''}, 'literature_review': {'source': 'CURATED:gh...', 'note': ''}}, 'colrev_pdf_id': 'cpid2:fffffffefffffffefffffffef80003fef80007fefffffffef93ffffef800001ef800003ef800001ef800001ef800003ef88ffffef80ffffeffbffffef800001ef800001ef800003ef800001ef800001ef800001ef800003ef800003ef800001ef800003ef800003ef800003ef800001ef8000ffeffff9ffefffff83efffffffe', 'screening_criteria': 'NA', 'file': PosixPath('curation_layer.bib/data/pdfs/Zwass2003.pdf'), 'doi': '10.1080/10864415.2003.11044273', 'dblp_key': 'https://dblp.org/rec/journals/ijecommerce/Zwass03a', 'journal': 'International Journal of Electronic Commerce', 'title': 'Electronic Commerce and Organizational Innovation - Aspects and Opportunities', 'year': '2003', 'volume': '7', 'number': '3', 'pages': '7--37', 'literature_review': 'yes', 'author': 'Zwass, Vladimir', 'metadata_source_repository_paths': 'curation_layer.bib', 'bibtex': '@article{Zwass2003,\n   colrev_origin                 = {lr_db.bib/Zwass2003;},\n   colrev_status                 = {rev_prescreen_excluded},\n   colrev_masterdata_provenance  = {journal:lr_db.bib/Zwass2003;;\n                                    year:lr_db.bib/Zwass2003;;\n                                    volume:lr_db.bib/Zwass2003;;\n                                    pages:lr_db.bib/Zwass2003;;\n                                    author:lr_db.bib/Zwass2003;;\n                                    title:manual;;\n                                    number:manual;;},\n   colrev_data_provenance        = {file:lr_db.bib/Zwass2003;;\n                                    colrev_pdf_id:file|pdf_hash;;\n                                    doi:manual;;\n                                    dblp_key:manual;;\n                                    literature_review:CURATED:gh...;;},\n   colrev_pdf_id                 = {cpid2:fffffffefffffffefffffffef80003fef80007fefffffffef93ffffef800001ef800003ef800001ef800001ef800003ef88ffffef80ffffeffbffffef800001ef800001ef800003ef800001ef800001ef800001ef800003ef800003ef800001ef800003ef800003ef800003ef800001ef8000ffeffff9ffefffff83efffffffe},\n   screening_criteria            = {NA},\n   file                          = {curation_layer.bib/data/pdfs/Zwass2003.pdf},\n   doi                           = {10.1080/10864415.2003.11044273},\n   author                        = {Zwass, Vladimir},\n   journal                       = {International Journal of Electronic Commerce},\n   title                         = {Electronic Commerce and Organizational Innovation - Aspects and Opportunities},\n   year                          = {2003},\n   volume                        = {7},\n   number                        = {3},\n   pages                         = {7--37},\n   dblp_key                      = {https://dblp.org/rec/journals/ijecommerce/Zwass03a},\n   literature_review             = {yes},\n   metadata_source_repository_paths  = {curation_layer.bib},\n}\n'}
Record cannot be indexed: -
{'ID': 'delAguilaBruquePadilla2002', 'ENTRYTYPE': 'article', 'colrev_origin': ['lr_db.bib/Aguila2002', 'md_crossref.bib/000092'], 'colrev_masterdata_provenance': {'journal': {'source': 'lr_db.bib/Aguila2002', 'note': ''}, 'title': {'source': 'lr_db.bib/Aguila2002', 'note': ''}, 'year': {'source': 'lr_db.bib/Aguila2002', 'note': ''}, 'volume': {'source': 'lr_db.bib/Aguila2002', 'note': ''}, 'pages': {'source': 'lr_db.bib/Aguila2002', 'note': ''}, 'author': {'source': 'lr_db.bib/Aguila2002', 'note': ''}, 'number': {'source': 'md_crossref.bib/000092', 'note': ''}}, 'colrev_data_provenance': {'file': {'source': 'lr_db.bib/Aguila2002', 'note': ''}, 'language': {'source': 'LanguageDetector', 'note': ''}, 'colrev_pdf_id': {'source': 'file|pdf_hash', 'note': ''}, 'doi': {'source': 'md_crossref.bib/000092', 'note': ''}, 'literature_review': {'source': 'CURATED:gh...', 'note': ''}}, 'colrev_pdf_id': 'cpid2:ffffffffffff0827ffffb7cff800000ffe00007ff06833fff04c43fff00007fff0fffffff1fffffff0000007f0000007f0000007f0000007f0000007f00243fff4fffffff0000007f01ffffffffffffff07ffffff0000007f0000007f0000007f0080007ffbfffffe0000007e0000007f0000007f0000007ffffffffffffffff', 'screening_criteria': 'NA', 'file': PosixPath('curation_layer.bib/data/pdfs/delAguilaBruquePadilla2002.pdf'), 'doi': '10.1080/1097198X.2002.10856336', 'journal': 'Journal of Global Information Technology Management', 'title': 'Global Information Technology Management and Organizational Analysis: Research Issues', 'year': '2002', 'volume': '5', 'number': '4', 'pages': '18--37', 'literature_review': 'yes', 'language': 'eng', 'author': 'del Águila, Ana R. and Bruque, Sebastián and Padilla, Antonio', 'metadata_source_repository_paths': 'curation_layer.bib', 'bibtex': '@article{delAguilaBruquePadilla2002,\n   colrev_origin                 = {lr_db.bib/Aguila2002;\n                                    md_crossref.bib/000092;},\n   colrev_masterdata_provenance  = {journal:lr_db.bib/Aguila2002;;\n                                    title:lr_db.bib/Aguila2002;;\n                                    year:lr_db.bib/Aguila2002;;\n                                    volume:lr_db.bib/Aguila2002;;\n                                    pages:lr_db.bib/Aguila2002;;\n                                    author:lr_db.bib/Aguila2002;;\n                                    number:md_crossref.bib/000092;;},\n   colrev_data_provenance        = {file:lr_db.bib/Aguila2002;;\n                                    language:LanguageDetector;;\n                                    colrev_pdf_id:file|pdf_hash;;\n                                    doi:md_crossref.bib/000092;;\n                                    literature_review:CURATED:gh...;;},\n   colrev_pdf_id                 = {cpid2:ffffffffffff0827ffffb7cff800000ffe00007ff06833fff04c43fff00007fff0fffffff1fffffff0000007f0000007f0000007f0000007f0000007f00243fff4fffffff0000007f01ffffffffffffff07ffffff0000007f0000007f0000007f0080007ffbfffffe0000007e0000007f0000007f0000007ffffffffffffffff},\n   screening_criteria            = {NA},\n   file                          = {curation_layer.bib/data/pdfs/delAguilaBruquePadilla2002.pdf},\n   doi                           = {10.1080/1097198X.2002.10856336},\n   author                        = {del Águila, Ana R. and Bruque, Sebastián and Padilla, Antonio},\n   journal                       = {Journal of Global Information Technology Management},\n   title                         = {Global Information Technology Management and Organizational Analysis: Research Issues},\n   year                          = {2002},\n   volume                        = {5},\n   number                        = {4},\n   pages                         = {18--37},\n   language                      = {eng},\n   literature_review             = {yes},\n   metadata_source_repository_paths  = {curation_layer.bib},\n}\n'}
Record cannot be indexed: -
{'ID': 'vonKrogh2012', 'ENTRYTYPE': 'article', 'colrev_origin': ['lr_db.bib/VonKrogh2012', 'md_crossref.bib/000093'], 'colrev_status': <RecordState.md_needs_manual_preparation: 3>, 'colrev_masterdata_provenance': {'journal': {'source': 'lr_db.bib/VonKrogh2012', 'note': ''}, 'year': {'source': 'lr_db.bib/VonKrogh2012', 'note': ''}, 'volume': {'source': 'lr_db.bib/VonKrogh2012', 'note': ''}, 'pages': {'source': 'lr_db.bib/VonKrogh2012', 'note': ''}, 'author': {'source': 'lr_db.bib/VonKrogh2012', 'note': ''}, 'title': {'source': 'md_crossref.bib/000093', 'note': ''}, 'number': {'source': 'md_crossref.bib/000093', 'note': ''}}, 'colrev_data_provenance': {'file': {'source': 'lr_db.bib/VonKrogh2012', 'note': ''}, 'language': {'source': 'LanguageDetector', 'note': ''}, 'colrev_pdf_id': {'source': 'file|pdf_hash', 'note': ''}, 'doi': {'source': 'md_crossref.bib/000093', 'note': ''}, 'literature_review': {'source': 'CURATED:gh...', 'note': ''}}, 'colrev_pdf_id': 'cpid2:ffffffffffffffffe3e003c3c2000043e2000043c0000003ffffffffc000009fe04fffffe1ffffffffffffffe7f1ffffe7f00003c3f00003c3f00003fff00003fff5fc47ffffffffe3ffffffe0000003c0000003c0000003e0000007c0000003c0000003e0000007ffffffffc0060203e07fffffe03fffffffffffffffffffff', 'screening_criteria': 'NA', 'file': PosixPath('curation_layer.bib/data/pdfs/vonKrogh2012.pdf'), 'doi': '10.1016/J.JSIS.2012.04.003', 'journal': 'The Journal of Strategic Information Systems', 'title': 'How does social software change knowledge management? Toward a strategic research agenda', 'year': '2012', 'volume': '21', 'number': '2', 'pages': '154--164', 'literature_review': 'yes', 'language': 'eng', 'author': 'von Krogh, Georg', 'metadata_source_repository_paths': 'curation_layer.bib', 'bibtex': '@article{vonKrogh2012,\n   colrev_origin                 = {lr_db.bib/VonKrogh2012;\n                                    md_crossref.bib/000093;},\n   colrev_status                 = {md_needs_manual_preparation},\n   colrev_masterdata_provenance  = {journal:lr_db.bib/VonKrogh2012;;\n                                    year:lr_db.bib/VonKrogh2012;;\n                                    volume:lr_db.bib/VonKrogh2012;;\n                                    pages:lr_db.bib/VonKrogh2012;;\n                                    author:lr_db.bib/VonKrogh2012;;\n                                    title:md_crossref.bib/000093;;\n                                    number:md_crossref.bib/000093;;},\n   colrev_data_provenance        = {file:lr_db.bib/VonKrogh2012;;\n                                    language:LanguageDetector;;\n                                    colrev_pdf_id:file|pdf_hash;;\n                                    doi:md_crossref.bib/000093;;\n                                    literature_review:CURATED:gh...;;},\n   colrev_pdf_id                 = {cpid2:ffffffffffffffffe3e003c3c2000043e2000043c0000003ffffffffc000009fe04fffffe1ffffffffffffffe7f1ffffe7f00003c3f00003c3f00003fff00003fff5fc47ffffffffe3ffffffe0000003c0000003c0000003e0000007c0000003c0000003e0000007ffffffffc0060203e07fffffe03fffffffffffffffffffff},\n   screening_criteria            = {NA},\n   file                          = {curation_layer.bib/data/pdfs/vonKrogh2012.pdf},\n   doi                           = {10.1016/J.JSIS.2012.04.003},\n   author                        = {von Krogh, Georg},\n   journal                       = {The Journal of Strategic Information Systems},\n   title                         = {How does social software change knowledge management? Toward a strategic research agenda},\n   year                          = {2012},\n   volume                        = {21},\n   number                        = {2},\n   pages                         = {154--164},\n   language                      = {eng},\n   literature_review             = {yes},\n   metadata_source_repository_paths  = {curation_layer.bib},\n}\n'}

---------------------------- Captured stderr setup -----------------------------
2024-01-29 13:21:03 [INFO] Create CoLRev repository
2024-01-29 13:21:03 [INFO] Set up git repository
2024-01-29 13:21:03 [INFO] Set up colrev.literature_review
2024-01-29 13:21:03 [INFO] Created commit
2024-01-29 13:21:03 [INFO] [92mCompleted init operation[0m
2024-01-29 13:21:03 [INFO] Load
2024-01-29 13:21:03 [INFO] Load converts search results and adds them to the shared data/records.bib.
2024-01-29 13:21:03 [INFO] Original records (search results) are stored in the directory data/search
2024-01-29 13:21:03 [INFO] See https://colrev.readthedocs.io/en/latest/manual/metadata_retrieval/load.html
  0%|          | 0/4 [00:00<?, ?it/s]100%|██████████| 4/4 [00:00<00:00, 99.45it/s]
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00, 101.42it/s]
  0%|          | 0/6 [00:00<?, ?it/s]100%|██████████| 6/6 [00:00<00:00, 107.34it/s]
2024-01-29 13:21:04 [INFO] Created commit
2024-01-29 13:21:04 [INFO] Created commit
2024-01-29 13:21:04 [INFO] Discover new source: data/search/test_records.bib
[31m[1m________ ERROR at setup of test_pdf_hash[pdf_path1-InvalidPDFException] ________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of TestDirectStatusAssignmentChecker.test_finds_direct_status_assignment _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______ ERROR at setup of test_get_quality_defects_author[RAI-defects0] ________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_author[Rai, Arun and B,-defects1] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_author[Rai, Arun and B-defects2] __[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__ ERROR at setup of test_get_quality_defects_author[Rai, PhD, Arun-defects3] __[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__ ERROR at setup of test_get_quality_defects_author[Rai, Phd, Arun-defects4] __[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m___ ERROR at setup of test_get_quality_defects_author[GuyPhD, Arun-defects5] ___[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_author[Rai, Arun; Straub, Detmar-defects6] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_author[Mathiassen, Lars and jonsson, katrin-defects7] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_author[University, Villanova and Sipior, Janice-defects8] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_author[Mourato, In\xeas and Dias, \xc1lvaro and Pereira, Leandro-defects9] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_author[DUTTON, JANE E. and ROBERTS, LAURA-defects10] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_author[Rai, Arun et al.-defects11] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_author[Rai, Arun, and others-defects12] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_author[Rai, and others-defects13] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_author[Neale, J. and Boitano, T. and Cooke, M. and Morrow, D. and et al.-defects14] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_author[Brocke, Jan vom-defects15] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_author[vom Brocke, Jan-defects16] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_author[{vom Brocke}, Jan-defects17] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_____ ERROR at setup of test_get_quality_defects_title[EDITORIAL-defects0] _____[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____ ERROR at setup of test_get_quality_defects_title[SAMJ\ufffd-defects1] _____[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m______ ERROR at setup of test_get_quality_defects_title[\u2122-defects2] _______[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_title[Some_Other_Title-defects3] __[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_title[Some other title-defects4] __[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_____ ERROR at setup of test_get_quality_defects_title[Some ...-defects5] ______[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_journal[A U-ARCHIT URBAN-defects0] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______ ERROR at setup of test_get_quality_defects_journal[SOS-defects1] _______[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m______ ERROR at setup of test_get_quality_defects_journal[SAMJ-defects2] _______[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m___ ERROR at setup of test_get_quality_defects_journal[SAMJ\ufffd-defects3] ____[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_journal[A Journal, Conference-defects4] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_thesis_multiple_authors[Author, Name and Other, Author-defects0] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__________________ ERROR at setup of test_year[204-defects0] ___________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__________________ ERROR at setup of test_year[2004-defects1] __________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_identical_title[titles0-defects0] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_identical_title[titles1-defects1] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_identical_title[titles2-defects2] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_testing_missing_field_year_forthcoming _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__ ERROR at setup of test_get_quality_defects_book_title_abbr[JAMS-defects0] ___[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_book_title_abbr[Normal book-defects1] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m___ ERROR at setup of test_get_quality_defects_language_format[eng-defects0] ___[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__ ERROR at setup of test_get_quality_defects_language_format[cend-defects1] ___[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_missing_fields[article-missing0-defects0] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_missing_fields[inproceedings-missing1-defects1] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_missing_fields[incollection-missing2-defects2] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_get_quality_defects_missing_fields[inbook-missing3-defects3] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_doi_not_matching_pattern[10.1177/02683962211048201-False] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__ ERROR at setup of test_doi_not_matching_pattern[10.5555/2014-04-01-False] ___[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_doi_not_matching_pattern[https://journals.sagepub.com/doi/10.1177/02683962211048201-True] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_isbn_not_matching_pattern[10.1177/02683962211048201-True] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__ ERROR at setup of test_isbn_not_matching_pattern[978-3-16-148410-0-False] ___[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____ ERROR at setup of test_isbn_not_matching_pattern[978-1605666594-False] ____[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m________ ERROR at setup of test_pubmedid_not_matching_pattern[1-False] _________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_____ ERROR at setup of test_pubmedid_not_matching_pattern[33044175-False] _____[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____ ERROR at setup of test_pubmedid_not_matching_pattern[33044175.2-False] ____[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_pubmedid_not_matching_pattern[10.1177/02683962211048201-True] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______________________ ERROR at setup of test_retracted _______________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__________________ ERROR at setup of test_record_state_model ___________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_________________ ERROR at setup of test_get_valid_transitions _________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m___________________ ERROR at setup of test_get_post_x_states ___________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__________________________ ERROR at setup of test_leq __________________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__________________________ ERROR at setup of test_eq ___________________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_________________________ ERROR at setup of test_copy __________________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_____________________ ERROR at setup of test_update_field ______________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_____________________ ERROR at setup of test_rename_field ______________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_____________________ ERROR at setup of test_remove_field ______________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_________________________ ERROR at setup of test_diff __________________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____________ ERROR at setup of test_change_entrytype_inproceedings _____________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______________ ERROR at setup of test_change_entrytype_article ________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__________________ ERROR at setup of test_add_provenance_all ___________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m___________________ ERROR at setup of test_format_bib_style ____________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_________________ ERROR at setup of test_print_citation_format _________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____________________ ERROR at setup of test_shares_origins _____________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______________________ ERROR at setup of test_get_value _______________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m___________________ ERROR at setup of test_create_colrev_id ____________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_____________________ ERROR at setup of test_get_colrev_id _____________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______________ ERROR at setup of test_has_overlapping_colrev_id _______________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m______________________ ERROR at setup of test_provenance _______________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m________________ ERROR at setup of test_set_masterdata_complete ________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______________ ERROR at setup of test_set_masterdata_consistent _______________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m______________ ERROR at setup of test_reset_pdf_provenance_notes _______________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_____________ ERROR at setup of test_cleanup_pdf_processing_fields _____________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m___________________ ERROR at setup of test_get_tei_filename ____________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_________________ ERROR at setup of test_get_record_similarity _________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______________ ERROR at setup of test_merge_select_non_all_caps _______________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__________________ ERROR at setup of test_merge_except_errata __________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m___________________ ERROR at setup of test_merge_local_index ___________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__________________ ERROR at setup of test_get_container_title __________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__________________ ERROR at setup of test_complete_provenance __________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m______________________ ERROR at setup of test_get_toc_key ______________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____________________ ERROR at setup of test_print_diff_pair ____________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m___________________ ERROR at setup of test_prescreen_exclude ___________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______________________ ERROR at setup of test_parse_bib _______________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m________________ ERROR at setup of test_print_prescreen_record _________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__________________ ERROR at setup of test_print_pdf_prep_man ___________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______ ERROR at setup of test_format_author_field[Tom Smith-Smith, Tom] _______[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_format_author_field[Garza, JL and Wu, ZH and Singh, M and Cherniack, MG.-Garza, JL and Wu, ZH and Singh, M and Cherniack, MG.] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_________________ ERROR at setup of test_extract_text_by_page __________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m___________________ ERROR at setup of test_set_pages_in_pdf ____________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m___________________ ERROR at setup of test_set_text_from_pdf ___________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______________ ERROR at setup of test_get_retrieval_similarity ________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_format_if_mostly_upper[TECHNOLOGICAL ENTITLEMENT: IT'S MY TECHNOLOGY AND I'LL (AB)USE IT HOW I WANT TO-Technological entitlement: it's my technology and I'll (ab)use it how I want to-sentence] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_format_if_mostly_upper[A STUDY OF B2B IN M&A SETTINGS-A study of B2B in M&A settings-sentence] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_format_if_mostly_upper[What makes one intrinsically interested in it? an exploratory study on influences of autistic tendency and gender in the u.s. and india-What makes one intrinsically interested in it? an exploratory study on influences of autistic tendency and gender in the u.s. and india-sentence] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_format_if_mostly_upper[ORGANIZATIONS LIKE ieee, ACM OPERATE B2B and c2C BUSINESSES-Organizations like IEEE, ACM operate B2B and C2C businesses-sentence] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____________ ERROR at setup of test_rename_fields_based_on_mapping _____________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m___________________ ERROR at setup of test_unify_pages_field ___________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m______________ ERROR at setup of test_preparation_save_condition _______________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m______________ ERROR at setup of test_preparation_break_condition ______________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m______________________ ERROR at setup of test_search_feed ______________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_____________________ ERROR at setup of test_settings_load _____________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____________________ ERROR at setup of test_colrev_version _____________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______________ ERROR at setup of test_prep_setup_custom_script ________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m________________ ERROR at setup of test_loading_config_properly ________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____ ERROR at setup of test_saving_config_file_as_json_from_yaml_correctly _____[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_____________________ ERROR at setup of test_setting_value _____________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m___________ ERROR at setup of test_setting_value_with_missing_field ____________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_compute_language_confidence_values[An Integrated Framework for Understanding Digital Work in Organizations-expected0] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_compute_language_confidence_values[Editorial-expected1] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_compute_language_confidence_values[Introduction-expected2] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_compute_language_confidence_values[\u201cEscaping the rat race\u201d: Justifications in digital nomadism-expected3] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_compute_language[An Integrated Framework for Understanding Digital Work in Organizations-eng] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____________ ERROR at setup of test_compute_language[Editorial-eng] ____________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__________ ERROR at setup of test_compute_language[Introduction-eng] ___________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_compute_language[\u201cEscaping the rat race\u201d: Justifications in digital nomadism-eng] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m______ ERROR at setup of test_validate_iso_639_3_language_codes[eng-True] ______[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m______ ERROR at setup of test_validate_iso_639_3_language_codes[en-False] ______[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______ ERROR at setup of test_unify_to_iso_639_3_language_codes[en-eng] _______[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______ ERROR at setup of test_unify_to_iso_639_3_language_codes[fr-fra] _______[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______ ERROR at setup of test_unify_to_iso_639_3_language_codes[de-deu] _______[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______ ERROR at setup of test_unify_to_iso_639_3_language_codes[ar-ara] _______[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____ ERROR at setup of test_unify_to_iso_639_3_language_codes[ENGLISH-eng] _____[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____ ERROR at setup of test_unify_to_iso_639_3_language_codes[Russian-rus] _____[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____ ERROR at setup of test_unify_to_iso_639_3_language_codes[English-eng] _____[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____ ERROR at setup of test_unify_to_iso_639_3_language_codes[Spanish-spa] _____[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____ ERROR at setup of test_unify_to_iso_639_3_language_codes[Chinese-zho] _____[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m___ ERROR at setup of test_unify_to_iso_639_3_language_codes[Portuguese-por] ___[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_____ ERROR at setup of test_unify_to_iso_639_3_language_codes[German-deu] _____[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m___ ERROR at setup of test_unify_to_iso_639_3_language_codes[Hungarian-hun] ____[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_____ ERROR at setup of test_unify_to_iso_639_3_language_codes[French-fra] _____[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_____________________ ERROR at setup of test_is_duplicate ______________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
---------------------------- Captured stdout setup -----------------------------
Reinitialize record_index and toc_index
Removing deprecated field: pdf_hash
Language not in ISO 639-3 format: Non-Standard language format
Record cannot be indexed: -
{'ID': 'ZviranErlich2003', 'ENTRYTYPE': 'article', 'colrev_origin': ['lr_db.bib/Zviran2003'], 'colrev_status': <RecordState.rev_synthesized: 15>, 'colrev_masterdata_provenance': {'journal': {'source': 'lr_db.bib/Zviran2003', 'note': ''}, 'title': {'source': 'lr_db.bib/Zviran2003', 'note': ''}, 'year': {'source': 'lr_db.bib/Zviran2003', 'note': ''}, 'volume': {'source': 'lr_db.bib/Zviran2003', 'note': ''}, 'pages': {'source': 'lr_db.bib/Zviran2003', 'note': ''}, 'author': {'source': 'lr_db.bib/Zviran2003', 'note': ''}}, 'colrev_data_provenance': {'file': {'source': 'lr_db.bib/Zviran2003', 'note': ''}, 'colrev_pdf_id': {'source': 'file|pdf_hash', 'note': ''}, 'doi': {'source': 'manual', 'note': ''}, 'literature_review': {'source': 'CURATED:gh...', 'note': ''}}, 'colrev_pdf_id': 'cpid2:fffffffff80813fffffffffff07ffffff00fbffff000001ff032e11fffffffffff0000ffffc003fff8fffffff01ffffff8fffffff8affffff80ffffffffffffffffffffff8a24a5ff800000ff000001ff8fffffff80801fff87ffffff800001ff800001ff804f47ff800001ff000001ffbdffffffffffffffbbeffffffffffff', 'doi': '10.17705/1CAIS.01205', 'journal': 'Communications of the Association for Information Systems', 'title': 'Measuring IS User Satisfaction: Review and Implications', 'year': 'last year...', 'volume': '12', 'pages': '81--103', 'literature_review': 'yes', 'author': 'Zviran, Moshe and Erlich, Zippy', 'metadata_source_repository_paths': 'curation_layer.bib', 'bibtex': '@article{ZviranErlich2003,\n   colrev_origin                 = {lr_db.bib/Zviran2003;},\n   colrev_status                 = {rev_synthesized},\n   colrev_masterdata_provenance  = {journal:lr_db.bib/Zviran2003;;\n                                    title:lr_db.bib/Zviran2003;;\n                                    year:lr_db.bib/Zviran2003;;\n                                    volume:lr_db.bib/Zviran2003;;\n                                    pages:lr_db.bib/Zviran2003;;\n                                    author:lr_db.bib/Zviran2003;;},\n   colrev_data_provenance        = {file:lr_db.bib/Zviran2003;;\n                                    colrev_pdf_id:file|pdf_hash;;\n                                    doi:manual;;\n                                    literature_review:CURATED:gh...;;},\n   colrev_pdf_id                 = {cpid2:fffffffff80813fffffffffff07ffffff00fbffff000001ff032e11fffffffffff0000ffffc003fff8fffffff01ffffff8fffffff8affffff80ffffffffffffffffffffff8a24a5ff800000ff000001ff8fffffff80801fff87ffffff800001ff800001ff804f47ff800001ff000001ffbdffffffffffffffbbeffffffffffff},\n   screening_criteria            = {NA},\n   doi                           = {10.17705/1CAIS.01205},\n   author                        = {Zviran, Moshe and Erlich, Zippy},\n   journal                       = {Communications of the Association for Information Systems},\n   title                         = {Measuring IS User Satisfaction: Review and Implications},\n   year                          = {last year...},\n   volume                        = {12},\n   pages                         = {81--103},\n   literature_review             = {yes},\n   metadata_source_repository_paths  = {curation_layer.bib},\n}\n'}
Record cannot be indexed: -
{'ID': 'Zwass2003', 'ENTRYTYPE': 'article', 'colrev_origin': ['lr_db.bib/Zwass2003'], 'colrev_status': <RecordState.rev_prescreen_excluded: 6>, 'colrev_masterdata_provenance': {'journal': {'source': 'lr_db.bib/Zwass2003', 'note': ''}, 'year': {'source': 'lr_db.bib/Zwass2003', 'note': ''}, 'volume': {'source': 'lr_db.bib/Zwass2003', 'note': ''}, 'pages': {'source': 'lr_db.bib/Zwass2003', 'note': ''}, 'author': {'source': 'lr_db.bib/Zwass2003', 'note': ''}, 'title': {'source': 'manual', 'note': ''}, 'number': {'source': 'manual', 'note': ''}}, 'colrev_data_provenance': {'file': {'source': 'lr_db.bib/Zwass2003', 'note': ''}, 'colrev_pdf_id': {'source': 'file|pdf_hash', 'note': ''}, 'doi': {'source': 'manual', 'note': ''}, 'dblp_key': {'source': 'manual', 'note': ''}, 'literature_review': {'source': 'CURATED:gh...', 'note': ''}}, 'colrev_pdf_id': 'cpid2:fffffffefffffffefffffffef80003fef80007fefffffffef93ffffef800001ef800003ef800001ef800001ef800003ef88ffffef80ffffeffbffffef800001ef800001ef800003ef800001ef800001ef800001ef800003ef800003ef800001ef800003ef800003ef800003ef800001ef8000ffeffff9ffefffff83efffffffe', 'screening_criteria': 'NA', 'doi': '10.1080/10864415.2003.11044273', 'dblp_key': 'https://dblp.org/rec/journals/ijecommerce/Zwass03a', 'journal': 'International Journal of Electronic Commerce', 'title': 'Electronic Commerce and Organizational Innovation - Aspects and Opportunities', 'year': '2003', 'volume': '7', 'number': '3', 'pages': '7--37', 'literature_review': 'yes', 'author': 'Zwass, Vladimir', 'metadata_source_repository_paths': 'curation_layer.bib', 'bibtex': '@article{Zwass2003,\n   colrev_origin                 = {lr_db.bib/Zwass2003;},\n   colrev_status                 = {rev_prescreen_excluded},\n   colrev_masterdata_provenance  = {journal:lr_db.bib/Zwass2003;;\n                                    year:lr_db.bib/Zwass2003;;\n                                    volume:lr_db.bib/Zwass2003;;\n                                    pages:lr_db.bib/Zwass2003;;\n                                    author:lr_db.bib/Zwass2003;;\n                                    title:manual;;\n                                    number:manual;;},\n   colrev_data_provenance        = {file:lr_db.bib/Zwass2003;;\n                                    colrev_pdf_id:file|pdf_hash;;\n                                    doi:manual;;\n                                    dblp_key:manual;;\n                                    literature_review:CURATED:gh...;;},\n   colrev_pdf_id                 = {cpid2:fffffffefffffffefffffffef80003fef80007fefffffffef93ffffef800001ef800003ef800001ef800001ef800003ef88ffffef80ffffeffbffffef800001ef800001ef800003ef800001ef800001ef800001ef800003ef800003ef800001ef800003ef800003ef800003ef800001ef8000ffeffff9ffefffff83efffffffe},\n   screening_criteria            = {NA},\n   doi                           = {10.1080/10864415.2003.11044273},\n   author                        = {Zwass, Vladimir},\n   journal                       = {International Journal of Electronic Commerce},\n   title                         = {Electronic Commerce and Organizational Innovation - Aspects and Opportunities},\n   year                          = {2003},\n   volume                        = {7},\n   number                        = {3},\n   pages                         = {7--37},\n   dblp_key                      = {https://dblp.org/rec/journals/ijecommerce/Zwass03a},\n   literature_review             = {yes},\n   metadata_source_repository_paths  = {curation_layer.bib},\n}\n'}
Record cannot be indexed: -
{'ID': 'delAguilaBruquePadilla2002', 'ENTRYTYPE': 'article', 'colrev_origin': ['lr_db.bib/Aguila2002', 'md_crossref.bib/000092'], 'colrev_masterdata_provenance': {'journal': {'source': 'lr_db.bib/Aguila2002', 'note': ''}, 'title': {'source': 'lr_db.bib/Aguila2002', 'note': ''}, 'year': {'source': 'lr_db.bib/Aguila2002', 'note': ''}, 'volume': {'source': 'lr_db.bib/Aguila2002', 'note': ''}, 'pages': {'source': 'lr_db.bib/Aguila2002', 'note': ''}, 'author': {'source': 'lr_db.bib/Aguila2002', 'note': ''}, 'number': {'source': 'md_crossref.bib/000092', 'note': ''}}, 'colrev_data_provenance': {'file': {'source': 'lr_db.bib/Aguila2002', 'note': ''}, 'language': {'source': 'LanguageDetector', 'note': ''}, 'colrev_pdf_id': {'source': 'file|pdf_hash', 'note': ''}, 'doi': {'source': 'md_crossref.bib/000092', 'note': ''}, 'literature_review': {'source': 'CURATED:gh...', 'note': ''}}, 'colrev_pdf_id': 'cpid2:ffffffffffff0827ffffb7cff800000ffe00007ff06833fff04c43fff00007fff0fffffff1fffffff0000007f0000007f0000007f0000007f0000007f00243fff4fffffff0000007f01ffffffffffffff07ffffff0000007f0000007f0000007f0080007ffbfffffe0000007e0000007f0000007f0000007ffffffffffffffff', 'screening_criteria': 'NA', 'doi': '10.1080/1097198X.2002.10856336', 'journal': 'Journal of Global Information Technology Management', 'title': 'Global Information Technology Management and Organizational Analysis: Research Issues', 'year': '2002', 'volume': '5', 'number': '4', 'pages': '18--37', 'literature_review': 'yes', 'language': 'eng', 'author': 'del Águila, Ana R. and Bruque, Sebastián and Padilla, Antonio', 'metadata_source_repository_paths': 'curation_layer.bib', 'bibtex': '@article{delAguilaBruquePadilla2002,\n   colrev_origin                 = {lr_db.bib/Aguila2002;\n                                    md_crossref.bib/000092;},\n   colrev_masterdata_provenance  = {journal:lr_db.bib/Aguila2002;;\n                                    title:lr_db.bib/Aguila2002;;\n                                    year:lr_db.bib/Aguila2002;;\n                                    volume:lr_db.bib/Aguila2002;;\n                                    pages:lr_db.bib/Aguila2002;;\n                                    author:lr_db.bib/Aguila2002;;\n                                    number:md_crossref.bib/000092;;},\n   colrev_data_provenance        = {file:lr_db.bib/Aguila2002;;\n                                    language:LanguageDetector;;\n                                    colrev_pdf_id:file|pdf_hash;;\n                                    doi:md_crossref.bib/000092;;\n                                    literature_review:CURATED:gh...;;},\n   colrev_pdf_id                 = {cpid2:ffffffffffff0827ffffb7cff800000ffe00007ff06833fff04c43fff00007fff0fffffff1fffffff0000007f0000007f0000007f0000007f0000007f00243fff4fffffff0000007f01ffffffffffffff07ffffff0000007f0000007f0000007f0080007ffbfffffe0000007e0000007f0000007f0000007ffffffffffffffff},\n   screening_criteria            = {NA},\n   doi                           = {10.1080/1097198X.2002.10856336},\n   author                        = {del Águila, Ana R. and Bruque, Sebastián and Padilla, Antonio},\n   journal                       = {Journal of Global Information Technology Management},\n   title                         = {Global Information Technology Management and Organizational Analysis: Research Issues},\n   year                          = {2002},\n   volume                        = {5},\n   number                        = {4},\n   pages                         = {18--37},\n   language                      = {eng},\n   literature_review             = {yes},\n   metadata_source_repository_paths  = {curation_layer.bib},\n}\n'}
Record cannot be indexed: -
{'ID': 'vonKrogh2012', 'ENTRYTYPE': 'article', 'colrev_origin': ['lr_db.bib/VonKrogh2012', 'md_crossref.bib/000093'], 'colrev_status': <RecordState.md_needs_manual_preparation: 3>, 'colrev_masterdata_provenance': {'journal': {'source': 'lr_db.bib/VonKrogh2012', 'note': ''}, 'year': {'source': 'lr_db.bib/VonKrogh2012', 'note': ''}, 'volume': {'source': 'lr_db.bib/VonKrogh2012', 'note': ''}, 'pages': {'source': 'lr_db.bib/VonKrogh2012', 'note': ''}, 'author': {'source': 'lr_db.bib/VonKrogh2012', 'note': ''}, 'title': {'source': 'md_crossref.bib/000093', 'note': ''}, 'number': {'source': 'md_crossref.bib/000093', 'note': ''}}, 'colrev_data_provenance': {'file': {'source': 'lr_db.bib/VonKrogh2012', 'note': ''}, 'language': {'source': 'LanguageDetector', 'note': ''}, 'colrev_pdf_id': {'source': 'file|pdf_hash', 'note': ''}, 'doi': {'source': 'md_crossref.bib/000093', 'note': ''}, 'literature_review': {'source': 'CURATED:gh...', 'note': ''}}, 'colrev_pdf_id': 'cpid2:ffffffffffffffffe3e003c3c2000043e2000043c0000003ffffffffc000009fe04fffffe1ffffffffffffffe7f1ffffe7f00003c3f00003c3f00003fff00003fff5fc47ffffffffe3ffffffe0000003c0000003c0000003e0000007c0000003c0000003e0000007ffffffffc0060203e07fffffe03fffffffffffffffffffff', 'screening_criteria': 'NA', 'doi': '10.1016/J.JSIS.2012.04.003', 'journal': 'The Journal of Strategic Information Systems', 'title': 'How does social software change knowledge management? Toward a strategic research agenda', 'year': '2012', 'volume': '21', 'number': '2', 'pages': '154--164', 'literature_review': 'yes', 'language': 'eng', 'author': 'von Krogh, Georg', 'metadata_source_repository_paths': 'curation_layer.bib', 'bibtex': '@article{vonKrogh2012,\n   colrev_origin                 = {lr_db.bib/VonKrogh2012;\n                                    md_crossref.bib/000093;},\n   colrev_status                 = {md_needs_manual_preparation},\n   colrev_masterdata_provenance  = {journal:lr_db.bib/VonKrogh2012;;\n                                    year:lr_db.bib/VonKrogh2012;;\n                                    volume:lr_db.bib/VonKrogh2012;;\n                                    pages:lr_db.bib/VonKrogh2012;;\n                                    author:lr_db.bib/VonKrogh2012;;\n                                    title:md_crossref.bib/000093;;\n                                    number:md_crossref.bib/000093;;},\n   colrev_data_provenance        = {file:lr_db.bib/VonKrogh2012;;\n                                    language:LanguageDetector;;\n                                    colrev_pdf_id:file|pdf_hash;;\n                                    doi:md_crossref.bib/000093;;\n                                    literature_review:CURATED:gh...;;},\n   colrev_pdf_id                 = {cpid2:ffffffffffffffffe3e003c3c2000043e2000043c0000003ffffffffc000009fe04fffffe1ffffffffffffffe7f1ffffe7f00003c3f00003c3f00003fff00003fff5fc47ffffffffe3ffffffe0000003c0000003c0000003e0000007c0000003c0000003e0000007ffffffffc0060203e07fffffe03fffffffffffffffffffff},\n   screening_criteria            = {NA},\n   doi                           = {10.1016/J.JSIS.2012.04.003},\n   author                        = {von Krogh, Georg},\n   journal                       = {The Journal of Strategic Information Systems},\n   title                         = {How does social software change knowledge management? Toward a strategic research agenda},\n   year                          = {2012},\n   volume                        = {21},\n   number                        = {2},\n   pages                         = {154--164},\n   language                      = {eng},\n   literature_review             = {yes},\n   metadata_source_repository_paths  = {curation_layer.bib},\n}\n'}
---------------------------- Captured stderr setup -----------------------------
  0%|          | 0/4 [00:00<?, ?it/s]100%|██████████| 4/4 [00:00<00:00, 101.93it/s]
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00, 103.74it/s]
  0%|          | 0/6 [00:00<?, ?it/s]100%|██████████| 6/6 [00:00<00:00, 110.64it/s]
[31m[1m___________________ ERROR at setup of test_get_year_from_toc ___________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m________________________ ERROR at setup of test_search _________________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_________________ ERROR at setup of test_get_fields_to_remove __________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m___________________ ERROR at setup of test_retrieve_from_toc ___________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____________ ERROR at setup of test_retrieve_based_on_colrev_pdf_id ____________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m________________ ERROR at setup of test_review_type_interfaces _________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______________ ERROR at setup of test_search_source_interfaces ________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m________________ ERROR at setup of test_prep_package_interfaces ________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m______________ ERROR at setup of test_prep_man_package_interfaces ______________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______________ ERROR at setup of test_dedupe_package_interfaces _______________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_____________ ERROR at setup of test_prescreen_package_interfaces ______________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m______________ ERROR at setup of test_pdf_get_package_interfaces _______________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____________ ERROR at setup of test_pdf_get_man_package_interfaces _____________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m______________ ERROR at setup of test_pdf_prep_package_interfaces ______________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____________ ERROR at setup of test_pdf_prep_man_package_interfaces ____________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______________ ERROR at setup of test_screen_package_interfaces _______________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m________________ ERROR at setup of test_data_package_interfaces ________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__________________ ERROR at setup of test_get_package_details __________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__________________ ERROR at setup of test_update_package_list __________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__________________________ ERROR at setup of test_tei __________________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_____________ ERROR at setup of test_check_operation_precondition ______________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m________________________ ERROR at setup of test_checks _________________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m______________________ ERROR at setup of test_corrections ______________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_________________________ ERROR at setup of test_data __________________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__________________ ERROR at setup of test_data_custom_script ___________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m________________________ ERROR at setup of test_dedupe _________________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_________________ ERROR at setup of test_dedupe_skip_prescreen _________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____________________ ERROR at setup of test_dedupe_get_info ____________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____________________ ERROR at setup of test_repo_init_error ____________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m___________________ ERROR at setup of test_repo_init_errors ____________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______________ ERROR at setup of test_non_empty_dir_error_init ________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_________________________ ERROR at setup of test_load __________________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_________________________ ERROR at setup of test_load __________________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__________________ ERROR at setup of test_pdf_get_import_file __________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m______________ ERROR at setup of test_pdf_get_setup_custom_script ______________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______________ ERROR at setup of test_pdf_get_copy_pdfs_to_repo _______________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m______________ ERROR at setup of test_pdf_get_get_target_filepath ______________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m________________ ERROR at setup of test_pdf_get_ci_environemnt _________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_____________________ ERROR at setup of test_pdf_prep_man ______________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______________________ ERROR at setup of test_pdf_prep ________________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m______________________ ERROR at setup of test_pdf_discard ______________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______________________ ERROR at setup of test_prep_man ________________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______________ ERROR at setup of test_prep_man_excel_on_windows _______________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_________________ ERROR at setup of test_prep_man_csv_on_linux _________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_________________________ ERROR at setup of test_prep __________________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______________________ ERROR at setup of test_skip_prep _______________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m______________________ ERROR at setup of test_prep_set_id ______________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______________ ERROR at setup of test_prep_setup_custom_script ________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_____________________ ERROR at setup of test_prep_reset_id _____________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__________________ ERROR at setup of test_prep_reset_records ___________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_______________________ ERROR at setup of test_prescreen _______________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m________________________ ERROR at setup of test_screen _________________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m________________________ ERROR at setup of test_search _________________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m___________________ ERROR at setup of test_search_selection ____________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m___________________ ERROR at setup of test_search_add_source ___________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m______________ ERROR at setup of test_search_get_unique_filename _______________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_________________________ ERROR at setup of test_trace _________________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____ ERROR at setup of test_prep_exclude_languages[input_value0-expected0] _____[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_prep_exclude_languages[input_rec0-crossref_rec0-expected0] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_____ ERROR at setup of test_crossref_query[10.2196/22081-expected_dict0] ______[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m__ ERROR at setup of test_crossref_query[10.17705/1cais.04607-expected_dict1] __[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_crossref_query[10.1177/02683962211048201-expected_dict2] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_________________________ ERROR at setup of test_eric __________________________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_prep_exclude_complementary_materials[input_value0-True] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_prep_exclude_complementary_materials[input_value1-True] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_prep_exclude_complementary_materials[input_value2-False] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____ ERROR at setup of test_prep_exclude_languages[input_value0-expected0] _____[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____ ERROR at setup of test_prep_exclude_languages[input_value1-expected1] _____[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____ ERROR at setup of test_prep_exclude_languages[input_value2-expected2] _____[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m____ ERROR at setup of test_prep_exclude_languages[input_value3-expected3] _____[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_source[source_filepath0-colrev.eric-None-expected_file0] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_source[source_filepath1-colrev.ais_library-None-expected_file1] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_source[source_filepath2-colrev.crossref-custom_source2-expected_file2] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_source[source_filepath3-colrev.pubmed-None-expected_file3] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_source[source_filepath4-colrev.springer_link-None-expected_file4] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_source[source_filepath5-colrev.ebsco_host-None-expected_file5] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_source[source_filepath6-colrev.dblp-None-expected_file6] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_source[source_filepath7-colrev.europe_pmc-None-expected_file7] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_source[source_filepath8-colrev.acm_digital_library-None-expected_file8] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_source[source_filepath9-colrev.abi_inform_proquest-None-expected_file9] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_source[source_filepath10-colrev.scopus-None-expected_file10] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_source[source_filepath11-colrev.taylor_and_francis-None-expected_file11] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_source[source_filepath12-colrev.web_of_science-None-expected_file12] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_source[source_filepath13-colrev.wiley-None-expected_file13] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_source[source_filepath14-colrev.files_dir-custom_source14-expected_file14] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_source[source_filepath15-colrev.ieee-custom_source15-expected_file15] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_source[source_filepath16-colrev.jstor-None-expected_file16] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_source[source_filepath17-colrev.trid-None-expected_file17] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_source[source_filepath18-colrev.psycinfo-None-expected_file18] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m_ ERROR at setup of test_source[source_filepath19-colrev.unknown_source-None-expected_file19] _[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m______ ERROR at setup of test_loading_user_specified_email_with_none_set _______[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m________ ERROR at setup of test_prep_year_vol_iss[input_rec0-expected0] ________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[31m[1m________ ERROR at setup of test_prep_year_vol_iss[input_rec1-expected1] ________[0m

session_mocker = <pytest_mock.plugin.MockerFixture object at 0x7f090a8c6ad0>
tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f090bbfe860>, _basetemp=PosixPath('/tmp/pytest-of-peteer98/pytest-5'), _retention_count=3, _retention_policy='all')
helpers = <class 'conftest.Helpers'>

    [37m@pytest[39;49;00m.fixture(scope=[33m"[39;49;00m[33msession[39;49;00m[33m"[39;49;00m, name=[33m"[39;49;00m[33mbase_repo_review_manager[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [94mdef[39;49;00m [92mfixture_base_repo_review_manager[39;49;00m(session_mocker, tmp_path_factory, helpers):  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m    [39;49;00m[33m"""Fixture returning the base review_manager"""[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-locals[39;49;00m[90m[39;49;00m
        [90m# pylint: disable=too-many-statements[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.get_name_mail_from_git[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=([33m"[39;49;00m[33mTester Name[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@email.de[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch([90m[39;49;00m
            [33m"[39;49;00m[33mcolrev.env.environment_manager.EnvironmentManager.register_repo[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            return_value=(),[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        test_repo_dir = tmp_path_factory.mktemp([33m"[39;49;00m[33mbase_repo[39;49;00m[33m"[39;49;00m)  [90m# type: ignore[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry_yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.yaml[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        session_mocker.patch.object([90m[39;49;00m
            colrev.env.environment_manager.EnvironmentManager,[90m[39;49;00m
            [33m"[39;49;00m[33mregistry[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            test_repo_dir / [33m"[39;49;00m[33mreg.json[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
        os.chdir(test_repo_dir)[90m[39;49;00m
        colrev.review_manager.get_init_operation([90m[39;49;00m
            review_type=[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            target_path=test_repo_dir,[90m[39;49;00m
            light=[94mTrue[39;49;00m,[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager = colrev.review_manager.ReviewManager([90m[39;49;00m
            path_str=[96mstr[39;49;00m(test_repo_dir), force_mode=[94mTrue[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        review_manager.get_load_operation()[90m[39;49;00m
        git_repo = review_manager.dataset.get_repo()[90m[39;49;00m
        [94mif[39;49;00m review_manager.in_ci_environment():[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mname[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mTester[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
            git_repo.config_writer().set_value([33m"[39;49;00m[33muser[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33memail[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mtester@mail.com[39;49;00m[33m"[39;49;00m).release()[90m[39;49;00m
    [90m[39;49;00m
        [94mdef[39;49;00m [92mload_test_records[39;49;00m(test_data_path) -> [96mdict[39;49;00m:  [90m# type: ignore[39;49;00m[90m[39;49;00m
            test_records_dict: typing.Dict[Path, [96mdict[39;49;00m] = {}[90m[39;49;00m
            bib_files_to_index = test_data_path / Path([33m"[39;49;00m[33mlocal_index[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
            [94mfor[39;49;00m file_path [95min[39;49;00m bib_files_to_index.glob([33m"[39;49;00m[33m**/*[39;49;00m[33m"[39;49;00m):[90m[39;49;00m
                test_records_dict[Path(file_path.name)] = {}[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path [95min[39;49;00m test_records_dict:[90m[39;49;00m
                [94mwith[39;49;00m [96mopen[39;49;00m(bib_files_to_index.joinpath(path), encoding=[33m"[39;49;00m[33mutf-8[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m file:[90m[39;49;00m
                    parser = bibtex.Parser()[90m[39;49;00m
                    bib_data = parser.parse_string(file.read())[90m[39;49;00m
                    test_records_dict[path] = colrev.dataset.Dataset.parse_records_dict([90m[39;49;00m
                        records_dict=bib_data.entries[90m[39;49;00m
                    )[90m[39;49;00m
            [94mreturn[39;49;00m test_records_dict[90m[39;49;00m
    [90m[39;49;00m
        temp_sqlite = review_manager.path.parent / Path([33m"[39;49;00m[33msqlite_index_test.db[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mwith[39;49;00m session_mocker.patch.object([90m[39;49;00m
            colrev.env.local_index.LocalIndex, [33m"[39;49;00m[33mSQLITE_PATH[39;49;00m[33m"[39;49;00m, temp_sqlite[90m[39;49;00m
        ):[90m[39;49;00m
            test_records_dict = load_test_records(helpers.test_data_path)[90m[39;49;00m
            local_index = colrev.env.local_index.LocalIndex(verbose_mode=[94mTrue[39;49;00m)[90m[39;49;00m
            local_index.reinitialize_sqlite_db()[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mTrue[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m path, records [95min[39;49;00m test_records_dict.items():[90m[39;49;00m
                [94mif[39;49;00m [33m"[39;49;00m[33mcura[39;49;00m[33m"[39;49;00m [95mnot[39;49;00m [95min[39;49;00m [96mstr[39;49;00m(path):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                local_index.index_records([90m[39;49;00m
                    records=records,[90m[39;49;00m
                    repo_source_path=path,[90m[39;49;00m
                    curated_fields=[[33m"[39;49;00m[33mliterature_review[39;49;00m[33m"[39;49;00m],[90m[39;49;00m
                    curation_url=[33m"[39;49;00m[33mgh...[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                    curated_masterdata=[94mFalse[39;49;00m,[90m[39;49;00m
                )[90m[39;49;00m
    [90m[39;49;00m
        dedupe_operation = review_manager.get_dedupe_operation()[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mTrue[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m pytest.raises(colrev_exceptions.NoRecordsError):[90m[39;49;00m
            colrev.record.RecordStateModel.check_operation_precondition([90m[39;49;00m
                operation=dedupe_operation[90m[39;49;00m
            )[90m[39;49;00m
        dedupe_operation.review_manager.settings.project.delay_automated_processing = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.prep.prep_rounds[[94m0[39;49;00m].prep_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.resolve_crossrefs[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.source_specific_prep[39;49;00m[33m"[39;49;00m},[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_non_latin_alphabets"},[39;49;00m[90m[39;49;00m
            [90m# {"endpoint": "colrev.exclude_collections"},[39;49;00m[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.dedupe.dedupe_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.simple_dedupe[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.prescreen.prescreen_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.conditional_prescreen[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        review_manager.settings.pdf_get.pdf_get_package_endpoints = [[90m[39;49;00m
            {[33m"[39;49;00m[33mendpoint[39;49;00m[33m"[39;49;00m: [33m"[39;49;00m[33mcolrev.local_index[39;49;00m[33m"[39;49;00m}[90m[39;49;00m
        ][90m[39;49;00m
        review_manager.settings.pdf_prep.pdf_prep_package_endpoints = [][90m[39;49;00m
        review_manager.settings.screen.screen_package_endpoints = [][90m[39;49;00m
        review_manager.settings.data.data_package_endpoints = [][90m[39;49;00m
        review_manager.save_settings()[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33mchange settings[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.changed_settings_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        helpers.retrieve_test_file([90m[39;49;00m
            source=Path([33m"[39;49;00m[33msearch_files/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
            target=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m),[90m[39;49;00m
        )[90m[39;49;00m
        review_manager.dataset.add_changes(path=Path([33m"[39;49;00m[33mdata/search/test_records.bib[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        review_manager.create_commit(msg=[33m"[39;49;00m[33madd test_records.bib[39;49;00m[33m"[39;49;00m, manual_author=[94mTrue[39;49;00m)[90m[39;49;00m
        review_manager.add_test_records_commit = ([90m[39;49;00m
            review_manager.dataset.get_last_commit_sha()[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        search_operation = review_manager.get_search_operation()[90m[39;49;00m
>       search_operation.add_most_likely_sources()[90m[39;49;00m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/tests/conftest.py[0m:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:349: in add_most_likely_sources
    heuristic_list = [96mself[39;49;00m.get_new_sources_heuristic_list()[90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:416: in get_new_sources_heuristic_list
    heuristic_results[sfp_name] = [96mself[39;49;00m.__apply_source_heuristics([90m[39;49;00m
[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:330: in __apply_source_heuristics
    results_list = [96mself[39;49;00m.__get_heuristics_results_list([90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <colrev.ops.search.Search object at 0x7f08f0f43850>

    [94mdef[39;49;00m [92m__get_heuristics_results_list[39;49;00m([90m[39;49;00m
        [96mself[39;49;00m,[90m[39;49;00m
        *,[90m[39;49;00m
        filepath: Path,[90m[39;49;00m
        search_sources: [96mdict[39;49;00m,[90m[39;49;00m
        data: [96mstr[39;49;00m,[90m[39;49;00m
    ) -> [96mlist[39;49;00m:[90m[39;49;00m
        results_list = [][90m[39;49;00m
        [94mfor[39;49;00m ([90m[39;49;00m
            endpoint,[90m[39;49;00m
            endpoint_class,[90m[39;49;00m
        ) [95min[39;49;00m search_sources.items():[90m[39;49;00m
            res = endpoint_class.heuristic(filepath, data)  [90m# type: ignore[39;49;00m[90m[39;49;00m
>           [96mself[39;49;00m.review_manager.logger.debug([33mf[39;49;00m[33m"[39;49;00m[33m- [39;49;00m[33m{[39;49;00mendpoint[33m}[39;49;00m[33m: [39;49;00m[33m{[39;49;00mres[[33m'[39;49;00m[33mconfidence[39;49;00m[33m'[39;49;00m][33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
[1m[31mE           TypeError: 'NoneType' object is not subscriptable[0m

[1m[31m/home/peteer98/Desktop/SemanticScholar/colrev/colrev/ops/search.py[0m:291: TypeError
[36m[1m=========================== short test summary info ============================[0m
[31mERROR[0m tests/0_core/colrev_pdf_id_test.py::[1mtest_pdf_hash[pdf_path0-87ffff1fffffff1ff47fff7fe0000307e000071fffffff07f1603f0ffd67fffff7ffffffe0000007e0000007e0000007fc6d59b7e3ffffffe03fffffffffffffe1ff0007e0000007e0000007e00080ffe0008007e0000007e0000007e0000007e0008007e000fdffe0008fffe000000ff00087ffffffffffffffffffffffffff][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/colrev_pdf_id_test.py::[1mtest_pdf_hash[pdf_path1-InvalidPDFException][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/linter_test.py::[1mTestDirectStatusAssignmentChecker::test_finds_direct_status_assignment[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_author[RAI-defects0][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_author[Rai, Arun and B,-defects1][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_author[Rai, Arun and B-defects2][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_author[Rai, PhD, Arun-defects3][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_author[Rai, Phd, Arun-defects4][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_author[GuyPhD, Arun-defects5][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_author[Rai, Arun; Straub, Detmar-defects6][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_author[Mathiassen, Lars and jonsson, katrin-defects7][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_author[University, Villanova and Sipior, Janice-defects8][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_author[Mourato, In\xeas and Dias, \xc1lvaro and Pereira, Leandro-defects9][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_author[DUTTON, JANE E. and ROBERTS, LAURA-defects10][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_author[Rai, Arun et al.-defects11][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_author[Rai, Arun, and others-defects12][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_author[Rai, and others-defects13][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_author[Neale, J. and Boitano, T. and Cooke, M. and Morrow, D. and et al.-defects14][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_author[Brocke, Jan vom-defects15][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_author[vom Brocke, Jan-defects16][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_author[{vom Brocke}, Jan-defects17][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_title[EDITORIAL-defects0][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_title[SAMJ\ufffd-defects1][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_title[\u2122-defects2][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_title[Some_Other_Title-defects3][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_title[Some other title-defects4][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_title[Some ...-defects5][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_journal[A U-ARCHIT URBAN-defects0][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_journal[SOS-defects1][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_journal[SAMJ-defects2][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_journal[SAMJ\ufffd-defects3][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_journal[A Journal, Conference-defects4][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_thesis_multiple_authors[Author, Name and Other, Author-defects0][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_year[204-defects0][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_year[2004-defects1][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_identical_title[titles0-defects0][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_identical_title[titles1-defects1][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_identical_title[titles2-defects2][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_testing_missing_field_year_forthcoming[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_book_title_abbr[JAMS-defects0][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_book_title_abbr[Normal book-defects1][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_language_format[eng-defects0][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_language_format[cend-defects1][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_missing_fields[article-missing0-defects0][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_missing_fields[inproceedings-missing1-defects1][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_missing_fields[incollection-missing2-defects2][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_get_quality_defects_missing_fields[inbook-missing3-defects3][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_doi_not_matching_pattern[10.1177/02683962211048201-False][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_doi_not_matching_pattern[10.5555/2014-04-01-False][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_doi_not_matching_pattern[https://journals.sagepub.com/doi/10.1177/02683962211048201-True][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_isbn_not_matching_pattern[10.1177/02683962211048201-True][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_isbn_not_matching_pattern[978-3-16-148410-0-False][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_isbn_not_matching_pattern[978-1605666594-False][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_pubmedid_not_matching_pattern[1-False][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_pubmedid_not_matching_pattern[33044175-False][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_pubmedid_not_matching_pattern[33044175.2-False][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_pubmedid_not_matching_pattern[10.1177/02683962211048201-True][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/qm_test.py::[1mtest_retracted[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_state_state_model_test.py::[1mtest_record_state_model[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_state_state_model_test.py::[1mtest_get_valid_transitions[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_state_state_model_test.py::[1mtest_get_post_x_states[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_state_state_model_test.py::[1mtest_leq[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_eq[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_copy[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_update_field[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_rename_field[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_remove_field[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_diff[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_change_entrytype_inproceedings[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_change_entrytype_article[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_add_provenance_all[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_format_bib_style[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_print_citation_format[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_shares_origins[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_get_value[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_create_colrev_id[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_get_colrev_id[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_has_overlapping_colrev_id[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_provenance[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_set_masterdata_complete[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_set_masterdata_consistent[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_reset_pdf_provenance_notes[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_cleanup_pdf_processing_fields[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_get_tei_filename[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_get_record_similarity[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_merge_select_non_all_caps[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_merge_except_errata[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_merge_local_index[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_get_container_title[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_complete_provenance[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_get_toc_key[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_print_diff_pair[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_prescreen_exclude[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_parse_bib[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_print_prescreen_record[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_print_pdf_prep_man[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_format_author_field[Tom Smith-Smith, Tom][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_format_author_field[Garza, JL and Wu, ZH and Singh, M and Cherniack, MG.-Garza, JL and Wu, ZH and Singh, M and Cherniack, MG.][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_extract_text_by_page[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_set_pages_in_pdf[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_set_text_from_pdf[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_get_retrieval_similarity[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_format_if_mostly_upper[TECHNOLOGICAL ENTITLEMENT: IT'S MY TECHNOLOGY AND I'LL (AB)USE IT HOW I WANT TO-Technological entitlement: it's my technology and I'll (ab)use it how I want to-sentence][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_format_if_mostly_upper[A STUDY OF B2B IN M&A SETTINGS-A study of B2B in M&A settings-sentence][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_format_if_mostly_upper[What makes one intrinsically interested in it? an exploratory study on influences of autistic tendency and gender in the u.s. and india-What makes one intrinsically interested in it? an exploratory study on influences of autistic tendency and gender in the u.s. and india-sentence][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_format_if_mostly_upper[ORGANIZATIONS LIKE ieee, ACM OPERATE B2B and c2C BUSINESSES-Organizations like IEEE, ACM operate B2B and C2C businesses-sentence][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_rename_fields_based_on_mapping[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_unify_pages_field[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_preparation_save_condition[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/record_test.py::[1mtest_preparation_break_condition[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/search_feed_test.py::[1mtest_search_feed[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/settings_test.py::[1mtest_settings_load[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/0_core/upgrade_test.py::[1mtest_colrev_version[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/custom_script_setup_test.py::[1mtest_prep_setup_custom_script[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/environment_manager_test.py::[1mtest_loading_config_properly[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/environment_manager_test.py::[1mtest_saving_config_file_as_json_from_yaml_correctly[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/environment_manager_test.py::[1mtest_setting_value[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/environment_manager_test.py::[1mtest_setting_value_with_missing_field[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_compute_language_confidence_values[An Integrated Framework for Understanding Digital Work in Organizations-expected0][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_compute_language_confidence_values[Editorial-expected1][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_compute_language_confidence_values[Introduction-expected2][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_compute_language_confidence_values[\u201cEscaping the rat race\u201d: Justifications in digital nomadism-expected3][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_compute_language[An Integrated Framework for Understanding Digital Work in Organizations-eng][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_compute_language[Editorial-eng][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_compute_language[Introduction-eng][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_compute_language[\u201cEscaping the rat race\u201d: Justifications in digital nomadism-eng][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_validate_iso_639_3_language_codes[eng-True][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_validate_iso_639_3_language_codes[en-False][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_unify_to_iso_639_3_language_codes[en-eng][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_unify_to_iso_639_3_language_codes[fr-fra][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_unify_to_iso_639_3_language_codes[de-deu][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_unify_to_iso_639_3_language_codes[ar-ara][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_unify_to_iso_639_3_language_codes[ENGLISH-eng][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_unify_to_iso_639_3_language_codes[Russian-rus][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_unify_to_iso_639_3_language_codes[English-eng][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_unify_to_iso_639_3_language_codes[Spanish-spa][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_unify_to_iso_639_3_language_codes[Chinese-zho][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_unify_to_iso_639_3_language_codes[Portuguese-por][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_unify_to_iso_639_3_language_codes[German-deu][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_unify_to_iso_639_3_language_codes[Hungarian-hun][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/language_service_test.py::[1mtest_unify_to_iso_639_3_language_codes[French-fra][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/local_index_test.py::[1mtest_is_duplicate[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/local_index_test.py::[1mtest_get_year_from_toc[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/local_index_test.py::[1mtest_search[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/local_index_test.py::[1mtest_get_fields_to_remove[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/local_index_test.py::[1mtest_retrieve_from_toc[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/local_index_test.py::[1mtest_retrieve_based_on_colrev_pdf_id[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/packages_test.py::[1mtest_review_type_interfaces[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/packages_test.py::[1mtest_search_source_interfaces[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/packages_test.py::[1mtest_prep_package_interfaces[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/packages_test.py::[1mtest_prep_man_package_interfaces[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/packages_test.py::[1mtest_dedupe_package_interfaces[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/packages_test.py::[1mtest_prescreen_package_interfaces[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/packages_test.py::[1mtest_pdf_get_package_interfaces[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/packages_test.py::[1mtest_pdf_get_man_package_interfaces[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/packages_test.py::[1mtest_pdf_prep_package_interfaces[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/packages_test.py::[1mtest_pdf_prep_man_package_interfaces[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/packages_test.py::[1mtest_screen_package_interfaces[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/packages_test.py::[1mtest_data_package_interfaces[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/packages_test.py::[1mtest_get_package_details[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/packages_test.py::[1mtest_update_package_list[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/1_env/tei_test.py::[1mtest_tei[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/check_operation_test.py::[1mtest_check_operation_precondition[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/check_test.py::[1mtest_checks[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/correction_test.py::[1mtest_corrections[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/data_operation_test.py::[1mtest_data[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/data_operation_test.py::[1mtest_data_custom_script[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/dedupe_operation_test.py::[1mtest_dedupe[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/dedupe_operation_test.py::[1mtest_dedupe_skip_prescreen[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/dedupe_operation_test.py::[1mtest_dedupe_get_info[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/init_test.py::[1mtest_repo_init_error[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/init_test.py::[1mtest_repo_init_errors[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/init_test.py::[1mtest_non_empty_dir_error_init[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/load_utils_bib_test.py::[1mtest_load[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/load_utils_enl_test.py::[1mtest_load[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/pdf_get_operation_test.py::[1mtest_pdf_get_import_file[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/pdf_get_operation_test.py::[1mtest_pdf_get_setup_custom_script[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/pdf_get_operation_test.py::[1mtest_pdf_get_copy_pdfs_to_repo[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/pdf_get_operation_test.py::[1mtest_pdf_get_get_target_filepath[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/pdf_get_operation_test.py::[1mtest_pdf_get_ci_environemnt[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/pdf_prep_man_operation_test.py::[1mtest_pdf_prep_man[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/pdf_prep_operation_test.py::[1mtest_pdf_prep[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/pdf_prep_operation_test.py::[1mtest_pdf_discard[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/prep_man_operation_test.py::[1mtest_prep_man[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/prep_man_operation_test.py::[1mtest_prep_man_excel_on_windows[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/prep_man_operation_test.py::[1mtest_prep_man_csv_on_linux[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/prep_operation_test.py::[1mtest_prep[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/prep_operation_test.py::[1mtest_skip_prep[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/prep_operation_test.py::[1mtest_prep_set_id[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/prep_operation_test.py::[1mtest_prep_setup_custom_script[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/prep_operation_test.py::[1mtest_prep_reset_id[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/prep_operation_test.py::[1mtest_prep_reset_records[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/prescreen_operation_test.py::[1mtest_prescreen[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/screen_operation_test.py::[1mtest_screen[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/search_operation_test.py::[1mtest_search[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/search_operation_test.py::[1mtest_search_selection[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/search_operation_test.py::[1mtest_search_add_source[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/search_operation_test.py::[1mtest_search_get_unique_filename[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/2_ops/trace_operation_test.py::[1mtest_trace[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/add_journal_rankings_prep_test.py::[1mtest_prep_exclude_languages[input_value0-expected0][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/bibtex_crossref_resolution_test.py::[1mtest_prep_exclude_languages[input_rec0-crossref_rec0-expected0][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/crossref_test.py::[1mtest_crossref_query[10.2196/22081-expected_dict0][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/crossref_test.py::[1mtest_crossref_query[10.17705/1cais.04607-expected_dict1][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/crossref_test.py::[1mtest_crossref_query[10.1177/02683962211048201-expected_dict2][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/eric_test.py::[1mtest_eric[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/exclude_complementary_materials_prep_test.py::[1mtest_prep_exclude_complementary_materials[input_value0-True][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/exclude_complementary_materials_prep_test.py::[1mtest_prep_exclude_complementary_materials[input_value1-True][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/exclude_complementary_materials_prep_test.py::[1mtest_prep_exclude_complementary_materials[input_value2-False][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/exclude_languages_prep_test.py::[1mtest_prep_exclude_languages[input_value0-expected0][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/exclude_languages_prep_test.py::[1mtest_prep_exclude_languages[input_value1-expected1][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/exclude_languages_prep_test.py::[1mtest_prep_exclude_languages[input_value2-expected2][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/exclude_languages_prep_test.py::[1mtest_prep_exclude_languages[input_value3-expected3][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/source_specific_load_prep_test.py::[1mtest_source[source_filepath0-colrev.eric-None-expected_file0][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/source_specific_load_prep_test.py::[1mtest_source[source_filepath1-colrev.ais_library-None-expected_file1][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/source_specific_load_prep_test.py::[1mtest_source[source_filepath2-colrev.crossref-custom_source2-expected_file2][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/source_specific_load_prep_test.py::[1mtest_source[source_filepath3-colrev.pubmed-None-expected_file3][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/source_specific_load_prep_test.py::[1mtest_source[source_filepath4-colrev.springer_link-None-expected_file4][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/source_specific_load_prep_test.py::[1mtest_source[source_filepath5-colrev.ebsco_host-None-expected_file5][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/source_specific_load_prep_test.py::[1mtest_source[source_filepath6-colrev.dblp-None-expected_file6][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/source_specific_load_prep_test.py::[1mtest_source[source_filepath7-colrev.europe_pmc-None-expected_file7][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/source_specific_load_prep_test.py::[1mtest_source[source_filepath8-colrev.acm_digital_library-None-expected_file8][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/source_specific_load_prep_test.py::[1mtest_source[source_filepath9-colrev.abi_inform_proquest-None-expected_file9][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/source_specific_load_prep_test.py::[1mtest_source[source_filepath10-colrev.scopus-None-expected_file10][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/source_specific_load_prep_test.py::[1mtest_source[source_filepath11-colrev.taylor_and_francis-None-expected_file11][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/source_specific_load_prep_test.py::[1mtest_source[source_filepath12-colrev.web_of_science-None-expected_file12][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/source_specific_load_prep_test.py::[1mtest_source[source_filepath13-colrev.wiley-None-expected_file13][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/source_specific_load_prep_test.py::[1mtest_source[source_filepath14-colrev.files_dir-custom_source14-expected_file14][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/source_specific_load_prep_test.py::[1mtest_source[source_filepath15-colrev.ieee-custom_source15-expected_file15][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/source_specific_load_prep_test.py::[1mtest_source[source_filepath16-colrev.jstor-None-expected_file16][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/source_specific_load_prep_test.py::[1mtest_source[source_filepath17-colrev.trid-None-expected_file17][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/source_specific_load_prep_test.py::[1mtest_source[source_filepath18-colrev.psycinfo-None-expected_file18][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/source_specific_load_prep_test.py::[1mtest_source[source_filepath19-colrev.unknown_source-None-expected_file19][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/unpaywall_test.py::[1mtest_loading_user_specified_email_with_none_set[0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/year_vol_iss_prep_test.py::[1mtest_prep_year_vol_iss[input_rec0-expected0][0m - TypeError: 'NoneType' object is not subscriptable
[31mERROR[0m tests/3_built_in/year_vol_iss_prep_test.py::[1mtest_prep_year_vol_iss[input_rec1-expected1][0m - TypeError: 'NoneType' object is not subscriptable
[31m======================= [33m3 warnings[0m, [31m[1m235 errors[0m[31m in 10.74s[0m[31m =======================[0m

pylint...................................................................[41mFailed[m
[2m- hook id: pylint[m
[2m- exit code: 28[m

************* Module colrev.ops.built_in.search_sources.semanticscholarui
colrev/ops/built_in/search_sources/semanticscholarui.py:233:0: C0301: Line too long (103/100) (line-too-long)
colrev/ops/built_in/search_sources/semanticscholarui.py:304:0: C0301: Line too long (103/100) (line-too-long)
colrev/ops/built_in/search_sources/semanticscholarui.py:345:0: C0301: Line too long (104/100) (line-too-long)
colrev/ops/built_in/search_sources/semanticscholarui.py:370:0: C0301: Line too long (102/100) (line-too-long)
colrev/ops/built_in/search_sources/semanticscholarui.py:372:0: C0301: Line too long (108/100) (line-too-long)
colrev/ops/built_in/search_sources/semanticscholarui.py:428:0: C0301: Line too long (101/100) (line-too-long)
colrev/ops/built_in/search_sources/semanticscholarui.py:447:0: C0301: Line too long (101/100) (line-too-long)
colrev/ops/built_in/search_sources/semanticscholarui.py:1:0: C0114: Missing module docstring (missing-module-docstring)
colrev/ops/built_in/search_sources/semanticscholarui.py:155:12: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
colrev/ops/built_in/search_sources/semanticscholarui.py:54:4: R0912: Too many branches (20/12) (too-many-branches)
colrev/ops/built_in/search_sources/semanticscholarui.py:196:12: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
colrev/ops/built_in/search_sources/semanticscholarui.py:214:12: W0932: Missed constant usage (colrev-missed-constant-usage)
colrev/ops/built_in/search_sources/semanticscholarui.py:323:24: C0117: Consider changing "not a < b" to "a >= b" (unnecessary-negation)
colrev/ops/built_in/search_sources/semanticscholarui.py:414:25: C0209: Formatting a regular string which could be an f-string (consider-using-f-string)
colrev/ops/built_in/search_sources/semanticscholarui.py:434:25: C0209: Formatting a regular string which could be an f-string (consider-using-f-string)
************* Module colrev.ops.built_in.search_sources.semanticscholar_api
colrev/ops/built_in/search_sources/semanticscholar_api.py:77:0: C0301: Line too long (133/100) (line-too-long)
colrev/ops/built_in/search_sources/semanticscholar_api.py:118:0: C0301: Line too long (104/100) (line-too-long)
colrev/ops/built_in/search_sources/semanticscholar_api.py:288:0: C0301: Line too long (101/100) (line-too-long)
colrev/ops/built_in/search_sources/semanticscholar_api.py:105:8: W0612: Unused variable '__search_return__' (unused-variable)
colrev/ops/built_in/search_sources/semanticscholar_api.py:114:12: C0103: Variable name "test_DOI" doesn't conform to snake_case naming style (invalid-name)
colrev/ops/built_in/search_sources/semanticscholar_api.py:180:12: W0707: Consider explicitly re-raising using 'raise SystemExit from exc' (raise-missing-from)
colrev/ops/built_in/search_sources/semanticscholar_api.py:209:16: W0707: Consider explicitly re-raising using 'raise SystemExit from exc' (raise-missing-from)
colrev/ops/built_in/search_sources/semanticscholar_api.py:234:16: W0707: Consider explicitly re-raising using 'raise SystemExit from exc' (raise-missing-from)
colrev/ops/built_in/search_sources/semanticscholar_api.py:302:12: W0707: Consider explicitly re-raising using 'raise SystemExit from exc' (raise-missing-from)
colrev/ops/built_in/search_sources/semanticscholar_api.py:309:12: W0707: Consider explicitly re-raising using 'raise SystemExit from exc' (raise-missing-from)
colrev/ops/built_in/search_sources/semanticscholar_api.py:261:4: R0912: Too many branches (14/12) (too-many-branches)
colrev/ops/built_in/search_sources/semanticscholar_api.py:395:8: W0105: String statement has no effect (pointless-string-statement)
colrev/ops/built_in/search_sources/semanticscholar_api.py:396:8: W0107: Unnecessary pass statement (unnecessary-pass)
colrev/ops/built_in/search_sources/semanticscholar_api.py:401:8: W0105: String statement has no effect (pointless-string-statement)
colrev/ops/built_in/search_sources/semanticscholar_api.py:402:8: W0107: Unnecessary pass statement (unnecessary-pass)
colrev/ops/built_in/search_sources/semanticscholar_api.py:406:8: W0105: String statement has no effect (pointless-string-statement)
colrev/ops/built_in/search_sources/semanticscholar_api.py:407:8: W0107: Unnecessary pass statement (unnecessary-pass)
colrev/ops/built_in/search_sources/semanticscholar_api.py:413:8: W0105: String statement has no effect (pointless-string-statement)
colrev/ops/built_in/search_sources/semanticscholar_api.py:414:8: W0107: Unnecessary pass statement (unnecessary-pass)
************* Module colrev.ops.built_in.search_sources.semanticscholar_utils
colrev/ops/built_in/search_sources/semanticscholar_utils.py:23:4: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
colrev/ops/built_in/search_sources/semanticscholar_utils.py:23:7: R1714: Consider merging these comparisons with 'in' by using 'entrytype in ('journalarticle', 'journal')'. Use a set instead if elements are hashable. (consider-using-in)
colrev/ops/built_in/search_sources/semanticscholar_utils.py:37:0: R0912: Too many branches (26/12) (too-many-branches)
colrev/ops/built_in/search_sources/semanticscholar_utils.py:37:0: R0915: Too many statements (62/50) (too-many-statements)
Exception ignored in: <generator object _infer_attribute at 0x7f40f5085380>
Traceback (most recent call last):
  File "/home/peteer98/.local/lib/python3.10/site-packages/astroid/nodes/node_classes.py", line 1107, in _infer_attribute
    yield from owner.igetattr(node.attrname, context)
ValueError: generator already executing

